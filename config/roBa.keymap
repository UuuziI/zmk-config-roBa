#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <39 22>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 39>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <24 39>;
        };

        past {
            bindings = <&kp LC(V)>;
            key-positions = <39 25>;
        };

        all {
            bindings = <&kp LC(A)>;
            key-positions = <39 10>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <39 5>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R           &kp T                                       &kp Y                 &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &lt 4 F         &kp G        &mo 6          &kp ESCAPE      &kp H                 &kp J  &kp K      &kp L    &kp MINUS
&kp Z             &kp X         &kp C         &kp V           &kp B        &kp LANG2      &kp LANGUAGE_1  &kp N                 &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_SHIFT  &lt 1 SPACE  &lt 2 TAB      &kp BACKSPACE   &mt LEFT_SHIFT ENTER                             &mo 5
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        FUNCTION {
            bindings = <
&kp F11         &kp F7   &kp F8  &kp F9  &kp LA(F4)                                  &kp PG_UP         &kp HOME  &kp UP_ARROW  &kp END    &kp PG_DN
&kp LEFT_SHIFT  &kp F4   &kp F5  &kp F6  &kp LG(LEFT_ARROW)  &trans      &trans      &kp LG(UP_ARROW)  &kp LEFT  &kp DOWN      &kp RIGHT  &kp DEL
&kp F10         &kp F12  &kp F2  &kp F3  &kp LG(RIGHT)       &trans      &trans      &kp LG(DOWN)      &trans    &trans        &trans     &kp RSHIFT
&trans          &trans   &trans  &trans  &trans              &trans      &kp DELETE  &kp RIGHT_SHIFT                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LS(PG_UP) LS(PG_DN)>;
        };

        NUM {
            bindings = <
&kp LS(NON_US_BACKSLASH)  &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DOUBLE_QUOTES                                        &kp GRAVE     &kp N7        &kp N8        &kp N9        &kp EQUAL
&kp LEFT_SHIFT            &kp SQT        &kp LS(N9)        &kp LS(N0)         &kp LS(GRAVE)      &kp LC(LA(KP_NUMBER_0))      &trans   &kp COMMA     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&kp EXCLAMATION           &kp QUESTION   &kp SEMICOLON     &kp COLON          &kp LS(MINUS)      &trans                       &trans   &kp PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH
&trans                    &trans         &trans            &trans             &trans             &trans                       &kp DEL  &kp NUMBER_0                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp LS(PG_UP) LS(PG_DN)>;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                              &trans     &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans         &trans     &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans         &trans     &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &kp BACKSPACE  &kp ENTER                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans    &trans    &trans
&trans  &trans  &trans  &mo 4   &trans  &trans      &trans  &trans  &trans  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp C_MUTE      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
